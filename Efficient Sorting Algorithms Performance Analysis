#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>

using namespace std;

// Dilosi sinartisewn.
void insertion_sort(int arr[], int n);

void merge(int arr[], int l, int m, int r);

void merge_sort(int arr[], int l, int r);

int partition(int arr[], int low, int high);

void quick_sort(int arr[], int low, int high);

void heapify(int arr[], int n, int i);
void heap_sort(int arr[], int n);

void selection_sort(int arr[], int n);


int main()
{
    int N,e;
    double total_comparisons,total_time;

    cout << "Megethos pinaka: ";
    cin >> N;

    int *arr = new int[N];

// gia tuxaious arithmous.
    srand(time(0));

// Minima gia na epilegei o xristis.
    cout << "Epelekse enan algoritho taksinomisis:" << endl;
    cout << "Insertion Sort (1)" << endl;
    cout << "Merge Sort (2)" << endl;
    cout << "Quick Sort (3)" << endl;
    cout << "Heap Sort (4)" << endl;
    cout << "Selection Sort (5)" << endl;
    cout << "Exit (6)"<<endl;

    cin >> e;

// taksinomisi gia 30 fores.
    total_comparisons = 0;
    total_time = 0;
    for (int i = 0; i < 30; i++)
    {
        // arxikopoihsh tou pinaka me tuxaious arithmous.
        for (int j = 0; j < N; j++)
        {
            arr[j] = rand() % 30000;
        }

        // gia ton xrono enarksis.
        auto start = chrono::high_resolution_clock::now();

        if (e == 1)
        {
            insertion_sort(arr, N);
        }
        else if (e == 2)
        {
            merge_sort(arr, 0, N - 1);
        }
        else if (e == 3)
        {
            quick_sort(arr, 0, N - 1);
        }
        else if (e == 4)
        {
            heap_sort(arr, N);
        }
        else if (e == 5)
        {
            selection_sort(arr, N);
        }
        else if (e == 6)
        {
            exit(0);
        }

        // gia ton xrono pou teleiwnei
        auto stop = chrono::high_resolution_clock::now();

        // Ypologismos twn sugkrisewn.
        total_comparisons += N * (N - 1) / 2;// print the average number of comparisons and average sorting time
        // Ypologismos tou xronou taksinomisis.
        total_time  += chrono::duration_cast<chrono::microseconds>(stop - start).count();

    }
    //  Ypologismos kai emfanisei tou mesos arithmos sugkrisewn kai tou mesou xronou taksinomisis.
    cout << "Average number of comparisons: " << total_comparisons / 30 << endl;
    cout << "Average sorting time: " << total_time  / 30 << " microseconds" << endl;
    return 0;
}

//  Sunartisi taksinomisis parmbolis.
void insertion_sort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;

        // Metikinei ta stoixeia tou arr pou einai megalutera apo to kleidi,se mia thesi mprosta apo tin trexousa thesi.
        while (j >= 0 && arr[j] < key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

//  Sunartisi gia tin sugxwneusi duo taksinomimenwn pianakwn.
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    //  proswrinous pinakes.
    int A[n1], B[n2];

    //  Antigafi dedomenwn stous proswrinous pinakew L kai R
    for (i = 0; i < n1; i++)
        A[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        B[j] = arr[m + 1 + j];

    //  Arxikopoiish deiktwn prwtis, deuteris kai sugxwneysis.
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (A[i] >= B[j])
        {
            arr[k] = A[i];
            i++;
        }
        else
        {
            arr[k] = B[j];
            j++;
        }
        k++;
    }

    // Ean uparxoun upoloipa stoixeia tou A[] tote tha ginei antigrafei.
    while (i < n1)
    {
        arr[k] = A[i];
        i++;
        k++;
    }

// Ean uparxoun upoloipa stoixeia tou B[] tote tha ginei antigrafei.     while (j < n2)
    {
        arr[k] = B[j];
        j++;
        k++;
    }
}

// sunartisi taksinomisis suzeuksis.
void merge_sort(int arr[], int l, int r)
{
    if (l < r)
    {
        // vriskei to mesaio shmeio.
        int m = l + (r - l) / 2;

        //  taksinomisi prwtou kai deuterou misou
        merge_sort(arr, l, m);
        merge_sort(arr, m + 1, r);

        // sugxwneuei ta taksinomimena misa.
        merge(arr, l, m, r);
    }
}

// gia tin grigori taksinomisi ston pinaka
int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] >= pivot)
        {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

//  sunartisi gia tin grhgori taksinomisi.
void quick_sort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);

        quick_sort(arr, low, pi - 1);
        quick_sort(arr, pi + 1, high);
    }
}

// gia tin taksinomisi swrou.
void heapify(int arr[], int n, int i)
{
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    if (l < n && arr[l] > arr[largest])
        largest = l;

    if (r < n && arr[r] > arr[largest])
        largest = r;

    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// sunartisi gia tin taksinomisi swrou.
void heap_sort(int arr[], int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i >= 0; i--)
    {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

// sunartisi gia tin taksinomisi epilogis.
void selection_sort(int arr[], int n)
{
    int i, j, min_idx, temp;
    for (i = 0; i < n-1; i++)
    {
        min_idx = i;
        for (j = i+1; j < n; j++)
        {
            if (arr[j] > arr[min_idx])
            {
                min_idx = j;
            }
        }
        temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}
